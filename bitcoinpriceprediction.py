# -*- coding: utf-8 -*-
"""BitcoinPricePredictionipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z-wEvqkvyPpE0cngBgoADvupUFKZkWNR

IMPORTING THE DEPENDENCIES
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler

"""COLLECTING DATA"""

data_df = pd.read_csv('BTC-USD.csv', date_parser = True)
data_df

"""REMOVING UNNECESSARY COLUMNS"""

data = data_df.drop(['Date', 'Adj Close'], axis = 1)
data.head()

"""SCALING THE PARAMETERS USING MIN MAX SCALER with MIN - 0 and MAX - 1"""

scaler = MinMaxScaler()
data = scaler.fit_transform(data)
data

data.shape[0]

"""Creating LSTM Training Dataset using 311 samples with time step of 50 Days (256 samples of size 50x5)

"""

X_train = []
Y_train = []
for i in range(50, data.shape[0]-60):
    X_train.append(data[i-50:i])
    Y_train.append(data[i,0])

X_train, Y_train = np.array(X_train), np.array(Y_train)

X_train.shape, Y_train.shape

"""Creating LSTM Test Dataset using 60 samples"""

X_test = []
Y_test = []
for i in range(data.shape[0]-60, data.shape[0]):
    X_test.append(data[i-50:i])
    Y_test.append(data[i,0])

X_test, Y_test = np.array(X_test), np.array(Y_test)

X_test.shape, Y_test.shape

"""BUILDING LSTM - Long short term memory"""

from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout

"""Defining Model in a sequential manner"""

regressor = Sequential()
regressor.add(LSTM(units = 50, activation = 'relu', return_sequences = True, input_shape = (X_train.shape[1], 5)))
regressor.add(Dropout(0.2))

regressor.add(LSTM(units = 80, activation = 'relu', return_sequences = True))

regressor.add(LSTM(units = 100, activation = 'relu', return_sequences = True))

regressor.add(LSTM(units = 120, activation = 'relu'))

regressor.add(Dense(units = 1))

regressor.summary()

"""OPTIMIZER - ADAM OPTIMIZER

LOSS FUNCTION - mean_squared_error or mean_absolute_error

absolute error more accurate and interpretable
"""

regressor.compile(optimizer = 'adam', loss = 'mean_absolute_error')

"""ADJUST TO GET LOWER LOSS

"""

regressor.fit(X_train, Y_train, epochs = 15, batch_size =35)

"""VALUES SCALED DOWN DUE TO MIN MAX, REVERTING TO ACTUAL VALUE IS NESSASARY"""

scale = 1/scaler.scale_[0]

Y_test = Y_test*scale

"""PREDICTING THE PRICE"""

Y_pred = regressor.predict(X_test)

Y_pred = Y_pred*scale

"""GRAPH VISUALIZATUION - MATPLOTLIB"""

correlation = data_df.corr()
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.2f', annot=True, annot_kws={'size':8}, cmap='RdPu')

plt.figure(figsize=(13,6))
plt.plot(Y_test, color = 'red', label = 'Real Bitcoin Price')
plt.plot(Y_pred, color = 'green', label = 'Predicted Bitcoin Price')
plt.title('Bitcoin Price Prediction using RNN-LSTM')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()